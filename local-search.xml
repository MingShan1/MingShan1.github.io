<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>hexo博客从github迁移到gitee</title>
    <link href="/2020/03/27/hexo%E5%8D%9A%E5%AE%A2%E4%BB%8Egithub%E8%BF%81%E7%A7%BB%E5%88%B0gitee/"/>
    <url>/2020/03/27/hexo%E5%8D%9A%E5%AE%A2%E4%BB%8Egithub%E8%BF%81%E7%A7%BB%E5%88%B0gitee/</url>
    
    <content type="html"><![CDATA[<p>博客放到gitee上加载速度要比github快不少。所以将博客从github迁移到gitee。<a id="more"></a></p><p><a href="https://maycode1.gitee.io/" target="_blank" rel="noopener">https://maycode1.gitee.io/</a></p><p><strong>1.在gitee.com修改个性地址：</strong><br><img src="/img/in/gitee1.png" srcset="/img/loading.gif" alt=""></p><p><strong>2.创建一个与个性地址同名的仓库</strong></p><p><strong>3.复制公钥到gitee</strong></p><blockquote><p>在gitee添加自己电脑的ssh key，这样每次更新代码到gitee就不用再输入密码了。</p></blockquote><ul><li><p>如果本地已经有创建ssh，在</p><pre><code>C:\Users\lenovo\.ssh\id_rsa.pub</code></pre><p>目录下，打开id_rsa.pub文件，复制公钥到gitee的ssh key。</p></li><li><p>本地没有，需要创建一个创建ssh key。<br>打开git bash，输入</p><pre><code>ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</code></pre><p>进行创建。</p></li><li><p>注意<br>因为要进行写操作，点击“添加个人公匙”<br><img src="/img/in/gitee2.png" srcset="/img/loading.gif" alt=""></p></li></ul><p><strong>4.修改hexo的_config.yml</strong></p><blockquote><p>Deploy部分修改/添加gitee的地址（在仓库复制，ssh类型）<br><img src="/img/in/gitee3.png" srcset="/img/loading.gif" alt=""></p></blockquote><p><strong>5.部署</strong></p><blockquote><p>hexo d </p></blockquote><p><strong>6.在gitee上更新gitee page</strong></p><blockquote><p>gitee不支持免费的推送后自动部署<br>每次推送后需要在仓库 -&gt; 服务处点击更新</p></blockquote><p><strong>7.hexo发布到多个仓库</strong></p><blockquote><p><img src="/img/in/gitee3.png" srcset="/img/loading.gif" alt=""><br>如果同时部署到多个仓库，需要为这些仓库分别配置ssh-key。<br>参考链接：<a href="https://tommy88.gitee.io/%2F2018%2F01%2F02%2FGit-config-multi-SSH-Key%2F" target="_blank" rel="noopener">https://tommy88.gitee.io/%2F2018%2F01%2F02%2FGit-config-multi-SSH-Key%2F</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>博客搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>gitee</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决github无法打开的问题</title>
    <link href="/2020/03/27/%E8%A7%A3%E5%86%B3github%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2020/03/27/%E8%A7%A3%E5%86%B3github%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>githun上不去，或者打开的时候页面很“卡”。<a id="more"></a><br>那么，只需要在：</p><pre><code>C:\Windows\System32\drivers\etc\hosts</code></pre><p>目录下复制以下ip</p><pre><code># GitHub Start192.30.253.112 github.com192.30.253.119 gist.github.com151.101.100.133 assets-cdn.github.com151.101.100.133 raw.githubusercontent.com151.101.100.133 gist.githubusercontent.com151.101.100.133 cloud.githubusercontent.com151.101.100.133 camo.githubusercontent.com151.101.100.133 avatars0.githubusercontent.com151.101.100.133 avatars1.githubusercontent.com151.101.100.133 avatars2.githubusercontent.com151.101.100.133 avatars3.githubusercontent.com151.101.100.133 avatars4.githubusercontent.com151.101.100.133 avatars5.githubusercontent.com151.101.100.133 avatars6.githubusercontent.com151.101.100.133 avatars7.githubusercontent.com151.101.100.133 avatars8.githubusercontent.com# GitHub End</code></pre><ul><li>覆盖后，让hosts生效</li></ul><pre><code>win + r -&gt; 输入cmd -&gt; 在CMD窗口输入  ： ipconfig /flushdns</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSP201403 1相反数</title>
    <link href="/2020/03/25/CSP201403-1%E7%9B%B8%E5%8F%8D%E6%95%B0/"/>
    <url>/2020/03/25/CSP201403-1%E7%9B%B8%E5%8F%8D%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p><strong>问题描述</strong></p><blockquote><p>   有 N 个非零且各不相同的整数。请你编一个程序求出它们中有多少对相反数(a 和 -a 为一对相反数)。<a id="more"></a></p></blockquote><p><strong>输入格式</strong></p><blockquote><p>第一行包含一个正整数 N。(1 ≤ N ≤ 500)。<br>第二行为 N 个用单个空格隔开的非零整数,每个数的绝对值不超过1000,保证这些整数各不相同。</p></blockquote><p><strong>输出格式</strong></p><blockquote><p>   只输出一个整数,即这 N 个数中包含多少对相反数。</p></blockquote><p><strong>样例输入</strong></p><blockquote><p>5<br>1 2 3 -1 -2</p></blockquote><p><strong>样例输出</strong></p><blockquote><p>2</p></blockquote><p><strong>参考代码</strong></p><pre><code>#include&lt;iostream&gt;#include&lt;math.h&gt;using namespace std;int a[500];int b[1000];int N, ans = 0;int main(){    cin &gt;&gt; N;    for (int i = 0; i &lt; N; i++) {        cin &gt;&gt; a[i];        int t = abs(a[i]);        b[t] ++;//出现一次（正/负）对应下标加一         if (b[t] == 2) {//有一对相反数             ans++;        }    }    cout &lt;&lt; ans;    return 0; } </code></pre>]]></content>
    
    
    <categories>
      
      <category>算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CCF-CSP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSP201403 2窗口</title>
    <link href="/2020/03/25/CSP201403-2%E7%AA%97%E5%8F%A3/"/>
    <url>/2020/03/25/CSP201403-2%E7%AA%97%E5%8F%A3/</url>
    
    <content type="html"><![CDATA[<p><strong>问题描述</strong></p><blockquote><p>   在某图形操作系统中,有 N 个窗口,每个窗口都是一个两边与坐标轴分别平行的矩形区域。窗口的边界上的点也属于该窗口。窗口之间有层次的区别,在多于一个窗口重叠的区域里,只会显示位于顶层的窗口里的内容。<a id="more"></a><br>　　当你点击屏幕上一个点的时候,你就选择了处于被点击位置的最顶层窗口,并且这个窗口就会被移到所有窗口的最顶层,而剩余的窗口的层次顺序不变。如果你点击的位置不属于任何窗口,则系统会忽略你这次点击。<br>　　现在我们希望你写一个程序模拟点击窗口的过程。</p></blockquote><p><strong>输入格式</strong></p><blockquote><p>输入的第一行有两个正整数,即 N 和 M。(1 ≤ N ≤ 10,1 ≤ M ≤ 10)<br>接下来 N 行按照从最下层到最顶层的顺序给出 N 个窗口的位置。 每行包含四个非负整数 x1, y1, x2, y2,表示该窗口的一对顶点坐标分别为 (x1, y1) 和 (x2, y2)。保证 x1 &lt; x2,y1 &lt; y2。<br>接下来 M 行每行包含两个非负整数 x, y,表示一次鼠标点击的坐标。<br>题目中涉及到的所有点和矩形的顶点的 x, y 坐标分别不超过 2559 和 1439。</p></blockquote><p><strong>输出格式</strong></p><blockquote><p>   输出包括 M 行,每一行表示一次鼠标点击的结果。如果该次鼠标点击选择了一个窗口,则输出这个窗口的编号(窗口按照输入中的顺序从 1 编号到 N);如果没有,则输出”IGNORED”(不含双引号)。</p></blockquote><p><strong>样例输入</strong></p><blockquote><p>3 4<br>0 0 4 4<br>1 1 5 5<br>2 2 6 6<br>1 1<br>0 0<br>4 4<br>0 5</p></blockquote><p><strong>样例输出</strong></p><blockquote><p>2<br>1<br>1<br>IGNORED</p></blockquote><p><strong>样例说明</strong></p><blockquote><p>   第一次点击的位置同时属于第 1 和第 2 个窗口,但是由于第 2 个窗口在上面,它被选择并且被置于顶层。<br>　　第二次点击的位置只属于第 1 个窗口,因此该次点击选择了此窗口并将其置于顶层。现在的三个窗口的层次关系与初始状态恰好相反了。<br>　　第三次点击的位置同时属于三个窗口的范围,但是由于现在第 1 个窗口处于顶层,它被选择。<br>　　最后点击的 (0, 5) 不属于任何窗口。</p></blockquote><p><strong>解题思路：</strong></p><blockquote><p>每次点击都从最顶层开始检查。由于涉及到了中间删除加入首部等操作，最先想到了使用链表。<br>对STL库中的链表操作不太熟悉顺带复习一波。<br>1.<a href="https://www.cnblogs.com/renyuan/archive/2013/05/21/3091524.html" target="_blank" rel="noopener">c++标准库中，含有链表的类list</a>;<br>2.<a href="https://www.cnblogs.com/maluning/p/8570717.html" target="_blank" rel="noopener">C++迭代器的使用和操作总结</a>;</p></blockquote><p><strong>参考代码</strong></p><pre><code>#include&lt;iostream&gt;#include&lt;list&gt;using namespace std;int flag = 0;int pos[10][2];struct node {//窗口结构体     int num;//输入序号     int a[4];//4个点 };list&lt;node&gt; pag; int main(){    int N, M;//窗口数，点击次    cin &gt;&gt; N &gt;&gt; M;     //输入窗口坐标 x1 y1 x2 y2    for  (int i = 0; i &lt; N; i++) {        node x;        x.num = i + 1;        for (int j = 0; j &lt; 4; j++) {            cin &gt;&gt; x.a[j];        }        pag.push_back(x);    }    //输入点     for  (int i = 0; i &lt; M; i++) {        cin &gt;&gt; pos[i][0] &gt;&gt; pos[i][1];    }    pag.reverse();//链表翻转，最后输入的才是最顶层     //对输入的点从第一个窗口依次判断     list&lt;node&gt;::iterator it;//定义迭代器变量命     for (int i = 0; i &lt; M; i++) {        flag = 0;//查找时标志位置0         for (it = pag.begin(); it != pag.end(); it++) {            if ( (pos[i][0] &gt;= it-&gt;a[0]) &amp;&amp; (pos[i][1] &gt;= it-&gt;a[1]) &amp;&amp; (pos[i][0] &lt;= it-&gt;a[2]) &amp;&amp; (pos[i][1] &lt;= it-&gt;a[3])) {                cout &lt;&lt; it-&gt;num &lt;&lt; endl;                flag = 1;//找到                 node x = *it;//返回迭代器it指向的元素                pag.push_front(x); //加入到开始                  pag.erase(it);//删除当前节点                 break;            }        }        if (flag == 0) {//未找到可点击窗口             cout &lt;&lt; &quot;IGNORED&quot; &lt;&lt; endl;//不要忘了加回车！        }    }     return 0; } </code></pre><p><strong>法二</strong></p><blockquote><p>依照题目思路，将最末尾看作最顶层。可以用动态数组实现，选中了某一层就把该层的数据添加到数组末尾，再把数组中该层删除即可。</p></blockquote><p><strong>参考代码</strong></p><pre><code>#include&lt;iostream&gt;#include&lt;vector&gt;using namespace std;int pos[10][2]; struct Window{    int num;    int x1,y1;    int x2,y2;};vector&lt;Window&gt; pag;int N,M;int main(){    cin &gt;&gt; N &gt;&gt; M;    //输入坐标     for (int i = 0; i &lt; N; i++) {        Window x;        x.num = i + 1;         cin &gt;&gt; x.x1 &gt;&gt; x.y1 &gt;&gt; x.x2 &gt;&gt; x.y2;        pag.push_back(x);    }    //输入点     for (int i = 0; i &lt; M; i++) {        cin &gt;&gt; pos[i][0] &gt;&gt; pos[i][1];    }     //对每个点从尾（顶层）到头查找     for (int i = 0; i &lt; M; i++) {        int j;        for (j = pag.size() - 1; j &gt;=0; j--) {            if ((pos[i][0] &gt;= pag[j].x1) &amp;&amp; (pos[i][1] &gt;= pag[j].y1) &amp;&amp; (pos[i][0] &lt;= pag[j].x2) &amp;&amp; (pos[i][1] &lt;= pag[j].y2) ) {                cout &lt;&lt; pag[j].num &lt;&lt; endl;                pag.push_back(pag[j]);//加入末尾（顶层）                pag.erase(pag.begin() + j);//删除原来的元素                 break;             }        }        if (j &lt; 0) {//未找到             cout &lt;&lt; &quot;IGNORED&quot; &lt;&lt; endl;        }    }     return 0;}</code></pre>]]></content>
    
    
    <categories>
      
      <category>算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CCF-CSP</tag>
      
      <tag>STL库指针使用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSP201312 4有趣的数</title>
    <link href="/2020/03/22/CSP201312-4%E6%9C%89%E8%B6%A3%E7%9A%84%E6%95%B0/"/>
    <url>/2020/03/22/CSP201312-4%E6%9C%89%E8%B6%A3%E7%9A%84%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p><strong>问题描述</strong></p><blockquote><p>  我们把一个数称为有趣的，当且仅当：<br>　　1. 它的数字只包含0, 1, 2, 3，且这四个数字都出现过至少一次。<br>　　2. 所有的0都出现在所有的1之前，而所有的2都出现在所有的3之前。<br>　　3. 最高位数字不为0。<a id="more"></a><br>　　因此，符合我们定义的最小的有趣的数是2013。除此以外，4位的有趣的数还有两个：2031和2301。<br>　　请计算恰好有n位的有趣的数的个数。由于答案可能非常大，只需要输出答案除以1000000007的余数。</p></blockquote><p><strong>输入格式</strong></p><blockquote><p>   输入只有一行，包括恰好一个正整数n (4 ≤ n ≤ 1000)。</p></blockquote><p><strong>输出格式</strong></p><blockquote><p>   输出只有一行，包括恰好n 位的整数中有趣的数的个数除以1000000007的余数。</p></blockquote><p><strong>样例输入</strong></p><blockquote><p>4</p></blockquote><p><strong>样例输出</strong></p><blockquote><p>3</p></blockquote><p><strong>解题思路</strong></p><blockquote><p>1.用深搜，用s.find()查找前面是否出现过一些数字导致当前位不能选。当n比较大时，耗费时间太久O(n)=4^n，此方法会超时，不可取。<br>2.动态规划思想。通过分析得知，第1位数字必是2，前i位的数字组成有以下6种情况：<br>0、只包含 2<br>1、只包含 2、0<br>2、只包含 2、3<br>3、只包含 2、0、1<br>4、只包含 2、0、3<br>5、只包含 2、0、1、3<br>且第i+1 i+1i+1位数字的取法与前i ii位有关。我们设dp[i][j]表示前i位数字是由第j种情况组成的有趣的数的个数，那么可以得到dp[i]与dp[i-1]的递推式：<br>dp[i][0]=1<br>（前i-1位全为2，那么第i位在情况0下只能取2，且只有1种）<br>dp[i][1]=dp[i-1][0]+dp[i-1][1]<em>2<br>（若前i-1位由2组成，那么第i位只能取0以满足情况1；若前i-1位由2、0组成，那么第i位在情况1下可以取2或0。以下类似）<br>dp[i][2]=dp[i-1][0]+dp[i-1][2] //要求前i位由2、3组成：前i - 1位只有2，第i位要变成3；前i - 1位由2、3组成，因为前面有3，这一位只有取2这一种方法（以下类似）<br>dp[i][3]=dp[i-1][1]+dp[i-1][3]</em>2<br>dp[i][4]=dp[i-1][1]+dp[i-1][2]+dp[i-1][4]<em>2<br>dp[i][5]=dp[i-1][3]+dp[i-1][4]+dp[i-1][5]</em>2</p></blockquote><p><strong>参考代码</strong></p><pre><code>#include&lt;iostream&gt;#include&lt;string.h&gt;using namespace std;const int mod = 1000000007;long long dp[1005][6];int main(){    int n;    cin &gt;&gt; n;    for (int i = 1; i &lt;= n; i++ ) {        dp[i][0] = 1;        dp[i][1] = (dp[i-1][0] + dp[i-1][1]*2) % mod;        dp[i][2] = (dp[i-1][0] + dp[i-1][2]) % mod;        dp[i][3] = (dp[i-1][1] + dp[i-1][3]*2) % mod;        dp[i][4] = (dp[i-1][1] + dp[i-1][2]+dp[i-1][4]*2) % mod;        dp[i][5] = (dp[i-1][3] + dp[i-1][4]+dp[i-1][5]*2) % mod;    }    cout &lt;&lt; dp[n][5] % mod;    return 0; }  </code></pre>]]></content>
    
    
    <categories>
      
      <category>算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CCF-CSP</tag>
      
      <tag>动态规划问题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSP201312 3最大矩形</title>
    <link href="/2020/03/19/CSP201312-3%E6%9C%80%E5%A4%A7%E7%9F%A9%E5%BD%A2/"/>
    <url>/2020/03/19/CSP201312-3%E6%9C%80%E5%A4%A7%E7%9F%A9%E5%BD%A2/</url>
    
    <content type="html"><![CDATA[<p><strong>问题描述</strong></p><blockquote><p>　 在横轴上放了n个相邻的矩形，每个矩形的宽度是1，而第i（1 ≤ i ≤ n）个矩形的高度是hi。这n个矩形构成了一个直方图。例如，下图中六个矩形的高度就分别是3, 1, 6, 5, 2, 3。<a id="more"></a><br><img src="/img/csp/20131231.png" srcset="/img/loading.gif" alt=""><br>　　请找出能放在给定直方图里面积最大的矩形，它的边要与坐标轴平行。对于上面给出的例子，最大矩形如下图所示的阴影部分，面积是10。<br><img src="/img/csp/20131232.png" srcset="/img/loading.gif" alt=""></p></blockquote><p><strong>输入格式</strong></p><blockquote><p>　  第一行包含一个整数n，即矩形的数量(1 ≤ n ≤ 1000)。<br>　　第二行包含n 个整数h1, h2, … , hn，相邻的数之间由空格分隔。(1 ≤ hi ≤ 10000)。hi是第i个矩形的高度。</p></blockquote><p><strong>输出格式</strong></p><blockquote><p>　 输出一行，包含一个整数，即给定直方图内的最大矩形的面积。</p></blockquote><p><strong>样例输入</strong></p><blockquote><p>6<br>3 1 6 5 2 3</p></blockquote><p><strong>样例输出</strong></p><blockquote><p>10</p></blockquote><p><strong>解题思路</strong></p><blockquote><p>从高度为1开始，找当前高度的最大矩形面积。高度依次增加直到最高。</p></blockquote><p><strong>参考代码</strong></p><pre><code>#include&lt;iostream&gt;#include&lt;math.h&gt;using namespace std;int n, h[1005];int maxx = 0;int ans = 0;void judg(int heigh){    int tmp = 0;    int curmax = 0;    for (int i = 0; i &lt; n; i++) {        if (h[i] &gt;= heigh) {            tmp += heigh;         }         else {//当前未达到高度 ，将之前得到的最大矩形进行记录             curmax = max(tmp, curmax);            tmp = 0;//待下一轮统计         }    }    curmax = max(tmp, curmax);//注意，高度为1的不会走else，需要单独拿出来比较一次，存值到curmax；或者直到最后一个高度才符和，未走else，也要经过这一步     ans =  max(ans, curmax);//与其他层进行比较 }int main(){    cin &gt;&gt; n;    for (int i = 0; i &lt; n; i++) {        cin &gt;&gt; h[i];        maxx = max (maxx, h[i]);//存储最大高度     }    for (int i = 1; i &lt;= maxx; i++) {//分别找到对应高度的最大矩形         judg(i);    }    cout &lt;&lt;ans;    return 0;}</code></pre>]]></content>
    
    
    <categories>
      
      <category>算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CCF-CSP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSP201312 2ISBN号码</title>
    <link href="/2020/03/18/CSP201312-2ISBN%E5%8F%B7%E7%A0%81/"/>
    <url>/2020/03/18/CSP201312-2ISBN%E5%8F%B7%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<p><strong>问题描述</strong></p><blockquote><p>  每一本正式出版的图书都有一个ISBN号码与之对应，ISBN码包括9位数字、1位识别码和3位分隔符，其规定格式如“x-xxx-xxxxx-x”，其中符号“-”是分隔符（键盘上的减号），最后一位是识别码，例如0-670-82162-4就是一个标准的ISBN码。<a id="more"></a>ISBN码的首位数字表示书籍的出版语言，例如0代表英语；第一个分隔符“-”之后的三位数字代表出版社，例如670代表维京出版社；第二个分隔之后的五位数字代表该书在出版社的编号；最后一位为识别码。<br>　　识别码的计算方法如下：<br>　　首位数字乘以1加上次位数字乘以2……以此类推，用所得的结果mod 11，所得的余数即为识别码，如果余数为10，则识别码为大写字母X。例如ISBN号码0-670-82162-4中的识别码4是这样得到的：对067082162这9个数字，从左至右，分别乘以1，2，…，9，再求和，即0×1+6×2+……+2×9=158，然后取158 mod 11的结果4作为识别码。<br>　　编写程序判断输入的ISBN号码中识别码是否正确，如果正确，则仅输出“Right”；如果错误，则输出是正确的ISBN号码。</p></blockquote><p><strong>输入格式</strong></p><blockquote><p>　 输入只有一行，是一个字符序列，表示一本书的ISBN号码（保证输入符合ISBN号码的格式要求）。</p></blockquote><p><strong>输出格式</strong></p><blockquote><p>　 输出一行，假如输入的ISBN号码的识别码正确，那么输出“Right”，否则，按照规定的格式，输出正确的ISBN号码（包括分隔符“-”）。</p></blockquote><p><strong>样例输入</strong></p><blockquote><p>0-670-82162-4</p></blockquote><p><strong>样例输出</strong></p><blockquote><p>Right</p></blockquote><p><strong>样例输入</strong></p><blockquote><p>0-670-82162-0</p></blockquote><p><strong>样例输出</strong></p><blockquote><p>0-670-82162-4</p></blockquote><p><strong>tips</strong></p><blockquote><p>字符变数字：s - ‘0’ (ASCII码做差)<br>数字变字符：1 + ‘0’</p></blockquote><p><strong>参考代码</strong></p><pre><code>#include&lt;iostream&gt;using namespace std;char s[13];int end = 0;int main(){    cin &gt;&gt; s;    int tmp = 1;    for (int i = 0; i &lt; 11; i++) {        if(s[i] != &#39;-&#39;) {            end += ((s[i] - &#39;0&#39;) * tmp++) % 11;            end %= 11;        }    }    //考虑end的两种正确答案     if ((s[12] - &#39;0&#39;) == end &amp;&amp; end != 10 || end == 10 &amp;&amp; s[12] == &#39;X&#39;) {        cout &lt;&lt; &quot;Right&quot;;    }    else {//两种错误情况 ，纠正         if (end == 10)            s[12] = &#39;X&#39;;         else            s[12] = end + &#39;0&#39;;        for (int i = 0; i &lt;= 12; i++) {            cout &lt;&lt; s[i];        }    }    return 0; } </code></pre>]]></content>
    
    
    <categories>
      
      <category>算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CCF-CSP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSP201312 1出现次数最多的数</title>
    <link href="/2020/03/16/CSP201312-1%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E6%9C%80%E5%A4%9A%E7%9A%84%E6%95%B0/"/>
    <url>/2020/03/16/CSP201312-1%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E6%9C%80%E5%A4%9A%E7%9A%84%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p><strong>问题描述</strong></p><blockquote><p>  给定n个正整数，找出它们中出现次数最多的数。如果这样的数有多个，请输出其中最小的一个。<a id="more"></a></p></blockquote><p><strong>输入格式</strong></p><blockquote><p>输入的第一行只有一个正整数n(1 ≤ n ≤ 1000)，表示数字的个数。<br>输入的第二行有n个整数s1, s2, …, sn (1 ≤ si ≤ 10000, 1 ≤ i ≤ n)。相邻的数用空格分隔。</p></blockquote><p><strong>输出格式</strong></p><blockquote><p>   输出这n个次数中出现次数最多的数。如果这样的数有多个，输出其中最小的一个。</p></blockquote><p><strong>样例输入</strong></p><blockquote><p>6<br>10 1 10 20 30 20</p></blockquote><p><strong>样例输出</strong></p><blockquote><p>10</p></blockquote><p><strong>解题思路</strong></p><blockquote><p>用一个升序的集合保存出现次数相同的数。每当有出现次数更多的数，将集合清空，并将当前的数加入。最后集合的第一个元素即为所求解。</p></blockquote><p><strong>参考代码</strong></p><pre><code>#include&lt;iostream&gt;#include&lt;set&gt;using namespace std;int a[10005];//存储输入数据int b[10005];//存储每个数的个数 int n = 0, maxx = 0;set&lt;int, less&lt;int&gt; &gt; s;//集合排序从大到小 int main(){    cin &gt;&gt; n;    for (int i =0; i &lt; n; i++)    {        cin &gt;&gt; a[i];        b[a[i]] ++;    }     for (int i =1 ; i &lt;= 10000; i++)    {        if (b[i] &gt; maxx) {            maxx = b[i];             s.clear();//清空集合原有的数，保存出现次数更多的数             s.insert(i);        }        if (b[i] == maxx) {//相同出现次数，加入集合             s.insert(i);        }    }    cout &lt;&lt; *s.begin();    return 0; } </code></pre><p><strong>更简便方法</strong></p><blockquote><p>不用集合。从头到尾遍历数组b找到的第一个出现次数最大的数即为所求答案。因为是按数字升序遍历，即使后面有出现次数相同的数，最小数的也是最先出现的那一个。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CCF-CSP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSP201312 5Iamstuck!</title>
    <link href="/2020/03/15/CSP201312-5Iamstuck/"/>
    <url>/2020/03/15/CSP201312-5Iamstuck/</url>
    
    <content type="html"><![CDATA[<p><strong>问题描述</strong></p><blockquote><p>给定一个R行C列的地图，地图的每一个方格可能是’#’, ‘+’, ‘-‘, ‘|’, ‘.’, ‘S’, ‘T’七个字符中的一个，分别表示如下意思：<br>‘#’: 任何时候玩家都不能移动到此方格；<a id="more"></a><br>‘+’: 当玩家到达这一方格后，下一步可以向上下左右四个方向相邻的任意一个非’#’方格移动一格；<br>‘-‘: 当玩家到达这一方格后，下一步可以向左右两个方向相邻的一个非’#’方格移动一格；<br>‘|’: 当玩家到达这一方格后，下一步可以向上下两个方向相邻的一个非’#’方格移动一格；<br>‘.’: 当玩家到达这一方格后，下一步只能向下移动一格。如果下面相邻的方格为’#’，则玩家不能再移动；<br>‘S’: 玩家的初始位置，地图中只会有一个初始位置。玩家到达这一方格后，下一步可以向上下左右四个方向相邻的任意一个非’#’方格移动一格；<br>‘T’: 玩家的目标位置，地图中只会有一个目标位置。玩家到达这一方格后，可以选择完成任务，也可以选择不完成任务继续移动。如果继续移动下一步可以向上下左右四个方向相邻的任意一个非’#’方格移动一格。<br>此外，玩家不能移动出地图。<br>请找出满足下面两个性质的方格个数：<br>  1.玩家可以从初始位置移动到此方格；<br>  2.玩家不可以从此方格移动到目标位置。</p></blockquote><p><strong>输入格式</strong></p><blockquote><p>输入的第一行包括两个整数R 和C，分别表示地图的行和列数。(1 ≤ R, C ≤ 50)。<br>接下来的R行每行都包含C个字符。它们表示地图的格子。地图上恰好有一个’S’和一个’T’。</p></blockquote><p><strong>输出格式</strong></p><blockquote><p>如果玩家在初始位置就已经不能到达终点了，就输出“I’m stuck!”（不含双引号）。否则的话，输出满足性质的方格的个数。</p></blockquote><p><strong>样例输入</strong></p><blockquote><p>5 5<br>–+-+<br>..|#.<br>..|##<br>S-+-T<br>####.</p></blockquote><p><strong>样例输出</strong></p><blockquote><p>2</p></blockquote><p><strong>样例说明</strong></p><blockquote><p>如果把满足性质的方格在地图上用’X’标记出来的话，地图如下所示：<br>–+-+<br>..|#X<br>..|##<br>S-+-T<br>####X</p></blockquote><p><strong>解题思路：</strong></p><blockquote><p>从S出发找到所有能到的点，从T出发，逆着过程找到所有能到T的点。</p></blockquote><p><strong>关键：如何从T开始逆着过程找能到T的点。</strong></p><blockquote><p>如果当前点的某一方向有点x，那么该x必须要满足能走到当前点，才能继续从x为起点搜索下去。<br>如当前点的上方有一点，那么上方的点必须要有往下走能力才能算从上方的点能走到T。</p></blockquote><p><strong>tips:</strong></p><blockquote><p>1.在深搜过程不主动return，最后会根据限制条件走遍所有能走的点；<br>2.vis数组直接用来保存能到的点，在回溯时不用置0。因为只要考虑能否走到某一点；<br>3.如果不逆过程，而是对每一个点都进行一遍搜索看能否到T，会超出时间限制。</p></blockquote><p><strong>参考代码</strong></p><pre><code>#include&lt;iostream&gt;#include&lt;string.h&gt;using namespace std;int r = 0,c = 0;int dir[4][2] = {{0,-1}, {0, 1}, {-1,0}, {1, 0}};//左 右 上 下 int flag = 0;char map[55][55];bool visS[55][55],visT[55][55];//visS用于记录s点出发能到的所有点 ，visT用于记录能到T的点 int inbod(int x, int y){    return x &lt; r &amp;&amp; x &gt;= 0 &amp;&amp; y &lt; c &amp;&amp; y &gt;=0; } void dfsS(int x,int y){        visS[x][y] = 1;    if(map[x][y] == &#39;T&#39;) {//找到T         flag = 1;    }    //按方向划分 左右上下    if (map[x][y] == &#39;S&#39; || map[x][y] == &#39;-&#39; || map[x][y] == &#39;+&#39; || map[x][y] == &#39;T&#39;) {        if (inbod(x, y - 1) &amp;&amp; !visS[x][y - 1] &amp;&amp; map[x][y - 1] != &#39;#&#39;) {            dfsS(x, y - 1);        }    }    if (map[x][y] == &#39;S&#39; || map[x][y] == &#39;-&#39; || map[x][y] == &#39;+&#39; || map[x][y] == &#39;T&#39;) {        if (inbod(x, y + 1) &amp;&amp; !visS[x][y + 1] &amp;&amp; map[x][y + 1] != &#39;#&#39;) {            dfsS(x, y + 1);        }    }    if (map[x][y] == &#39;S&#39; || map[x][y] == &#39;+&#39; || map[x][y] == &#39;T&#39; ||  map[x][y] == &#39;|&#39;) {        if (inbod(x - 1, y) &amp;&amp; !visS[x - 1][y] &amp;&amp; map[x - 1][y] != &#39;#&#39;) {            dfsS(x - 1, y);        }    }    if (map[x][y] == &#39;S&#39; || map[x][y] == &#39;.&#39; || map[x][y] == &#39;+&#39; || map[x][y] == &#39;T&#39; || map[x][y] == &#39;|&#39;) {        if (inbod(x + 1, y) &amp;&amp; !visS[x + 1][y] &amp;&amp; map[x + 1][y] != &#39;#&#39;) {            dfsS(x + 1, y);        }    } } void dfsT(int x,int y){        visT[x][y] = 1;    for (int i = 0; i &lt; 4; i++)    {        int tx, ty;        tx = x + dir[i][0];        ty = y + dir[i][1];         if(inbod(tx, ty) &amp;&amp; map[tx][ty] != &#39;#&#39;) {            if(i == 0 &amp;&amp; (map[tx][ty] == &#39;S&#39; || map[tx][ty] == &#39;-&#39; || map[tx][ty] == &#39;+&#39; || map[tx][ty] == &#39;T&#39;) &amp;&amp; visT[tx][ty] == 0) dfsT(tx, ty);//在当前点左边的点，该点必须要有往右的能力             if(i == 1 &amp;&amp; (map[tx][ty] == &#39;S&#39; || map[tx][ty] == &#39;-&#39; || map[tx][ty] == &#39;+&#39; || map[tx][ty] == &#39;T&#39; ) &amp;&amp; visT[tx][ty] == 0) dfsT(tx, ty);            if(i == 2 &amp;&amp; (map[tx][ty] == &#39;S&#39; || map[tx][ty] == &#39;.&#39; || map[tx][ty] == &#39;+&#39; || map[tx][ty] == &#39;T&#39; || map[tx][ty] == &#39;|&#39;) &amp;&amp; visT[tx][ty] == 0) dfsT(tx, ty);            if(i == 3 &amp;&amp; (map[tx][ty] == &#39;S&#39; || map[tx][ty] == &#39;+&#39; || map[tx][ty] == &#39;T&#39; || map[tx][ty] == &#39;|&#39;) &amp;&amp; visT[tx][ty] == 0) dfsT(tx, ty);//在当前点下面，该点必须要有往上的能力         }     }  } int main(){    int sx = 0,sy = 0, ex = 0, ey = 0;    cin &gt;&gt; r &gt;&gt; c;    for (int i= 0; i &lt; r; i++) {        for (int j = 0; j &lt; c; j++) {            cin &gt;&gt; map[i][j];            if(map[i][j] == &#39;S&#39;) {                sx = i;                sy = j;            }            if(map[i][j] == &#39;T&#39;) {                ex = i;                ey = j;            }        }    }    dfsS(sx, sy);    if (flag == 0) {//能否找到T        cout &lt;&lt; &quot;I&#39;m stuck!&quot;;        return 0;     }    dfsT(ex, ey);//从T开始，逆找能到T的点     int cnt = 0;    for (int i= 0; i &lt; r; i++) {        for (int j = 0; j &lt; c; j++) {            if (visS[i][j] == 1 &amp;&amp; visT[i][j] == 0) {//S能到，且不能到T                 cnt ++;            }        }    }    cout &lt;&lt; cnt;    return 0;} </code></pre>]]></content>
    
    
    <categories>
      
      <category>算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CCF-CSP</tag>
      
      <tag>深搜</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用hexo博客搭建过程遇到的问题(待后续使用补充)</title>
    <link href="/2020/03/04/%E4%BD%BF%E7%94%A8hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98-%E5%BE%85%E5%90%8E%E7%BB%AD%E4%BD%BF%E7%94%A8%E8%A1%A5%E5%85%85/"/>
    <url>/2020/03/04/%E4%BD%BF%E7%94%A8hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98-%E5%BE%85%E5%90%8E%E7%BB%AD%E4%BD%BF%E7%94%A8%E8%A1%A5%E5%85%85/</url>
    
    <content type="html"><![CDATA[<p><strong>1.</strong><br>建立与你用户名对应的仓库，仓库名必须为<strong>【user_name.github.io】</strong>。 <a id="more"></a><br><strong>仓库名中的user_name必须和用户名相一致。</strong>在一年多前试着搭建了博客，当时没意识到这个问题的必要性与严重性，user_name随意的使用了其他名称，导致后期部署时，出现前端某张图片不能从github成功获取的情况。</p><blockquote><ul><li>如果你的仓库名为用户名.github.io的话，会自动开启GitHub Pages功能，且所有提交到master分支的代码，会当做网站内容被挂载起来，且网站访问地址为http://用户名.github.io</li></ul></blockquote><p><strong>2.</strong><br>仓库名命名错误，改回正确的名称会面临很多遗留的问题。我选择<a href="https://blog.csdn.net/wq6ylg08/article/details/88789501" target="_blank" rel="noopener">删除仓库</a>再重建。<br>参考<a href="https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html" target="_blank" rel="noopener">该博客</a>花了半个多小时重新搭建，此时开启本地预览服务以及部署到github上后均无任何问题。</p><p><strong>3.</strong><br>最开始搭建的的时候，建议先将想要的主题在本地配置好，预览无任何问题再，再部署到github上（上传文章也是如此），如果一边修改参数一边查看GitHub Pages的情况有可能会遇到一些不必要的问题。</p><p><strong>4.</strong><br>一些命令<br>hexo new “title” 新建文章(md文件)，title为文章的标题<br>hexo new page “pagename” 新建网页，pagename为网页的名称<br>hexo clean 清除部署的緩存<br>hexo n == hexo new 新建一篇文章<br>hexo g == hexo generate 生成静态页面<br>hexo s == hexo server 本地部署，可预览网站，默认端口为4000，浏览器输入localhost:4000即可进入网站进行预览，回到git-bash按ctrl+c退出预览(退出后localhost:4000失效)<br>hexo d == hexo deploy 将网站部署到GitHub<br>hexo g -d 生成页面并部署到GitHub<br>hexo g -s 生成页面并本地部署进行预览  </p><p><strong>待解决：</strong>about页面，微信二维码图片在本地预览能够悬浮出来，打开网站后无法悬浮出来。</p>]]></content>
    
    
    <categories>
      
      <category>博客搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>github pages</tag>
      
      <tag>踩坑</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>这个人很懒什么也没有留下</title>
    <link href="/2020/03/04/%E8%BF%99%E4%B8%AA%E4%BA%BA%E5%BE%88%E6%87%92%E4%BB%80%E4%B9%88%E4%B9%9F%E6%B2%A1%E6%9C%89%E7%95%99%E4%B8%8B/"/>
    <url>/2020/03/04/%E8%BF%99%E4%B8%AA%E4%BA%BA%E5%BE%88%E6%87%92%E4%BB%80%E4%B9%88%E4%B9%9F%E6%B2%A1%E6%9C%89%E7%95%99%E4%B8%8B/</url>
    
    <content type="html"><![CDATA[<p>详情请见右上角友情链接&gt;_&gt;。</p>]]></content>
    
    
    
    <tags>
      
      <tag>无聊</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
